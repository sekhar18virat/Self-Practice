Bitwise Operators: 

1. And (&)
2. Or (|)
3. Xor (^)
4. Left Shift (<<)
5. Right Shift (>>)
6. 1's Complement (~)

1. And Operator (&) : 
 let us assume a belongs to (0,1) 
 Then and operator behaves in the following way : 
  a & 1 = a 
  a & 0 = 0 
 And operator is used to switch of the bit.

2. Or Operator (|) : 
 let us assume a belongs to (0,1) 
 Then and operator behaves in the following way : 
  a | 1 = 1 
  a | 0 = a 
 And operator is used to switch on the bit.

3. Xor Operator(^) : 
 let us assume a belongs to (0,1) 
 Then and operator behaves in the following way : 
  a ^ 1 = ~a(complement of a) 
  a ^ 0 = a 

4. Left Shift (<<) :
 Moving the bits of the number to the left by n bits.
 let us say a = 5 (00000101)
 if we say a << 3 
 then the value will be 00101000 i.e. 40

5. Right Shift (>>) :
 Moving the bits of the number to the right by n bits.
 let us say a = 5 (00000101)
 if we say a >> 3 
 then the value will be 00000000 i.e. 0

6. 1's Complement (~) : 
 One's complement is just replacing current bit with alternate bit.
 let us a = 5 (00000101)
 now ~a will be 11111010 i.e.  210 